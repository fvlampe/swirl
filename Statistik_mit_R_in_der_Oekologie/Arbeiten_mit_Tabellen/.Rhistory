model.1b <- lm(Laenge.cm  ~ Temperatur - 1, data=laenge.stjean)  # Manuell vereinfacht
# oder: model.1b <- lm(Laenge.cm  ~ 0 + Temperatur, data=laenge.stjean)
summary(model.1b)
model.1 <- lm(Laenge.cm  ~ Temperatur, data=laenge.stjean)
summary(model.1)
plot(Laenge.cm ~ Temperatur, data = laenge.stjean)
abline(model.1)
model.1 <- lm(Laenge.cm  ~ Temperatur, data=laenge.stjean)
summary(model.1)
plot(Laenge.cm ~ Temperatur, data = laenge.stjean)
abline(model.1)
abline(model.2)
model.1 <- lm(Laenge.cm  ~ Temperatur, data=laenge.stjean)
summary(model.1)
plot(Laenge.cm ~ Temperatur, data = laenge.stjean)
abline(model.1)
abline(model.1b, col = "red")
par(mfrow = c(2, 2))
plot(model.1)
model.2 <- lm(Laenge.cm  ~ Temperatur + I(Temperatur^2), data=laenge.stjean)
summary(model.2)
extractAIC(model.1)
extractAIC(model.1b)
extractAIC(model.2)  # --> niedrigster AIC, bestes Modell
extractAIC(model.1)
extractAIC(model.2)  # --> niedrigster AIC, bestes Modell
anova(model.1, model.2)
shapiro.test(model.2$residuals)
par(mfrow = c(2, 2))
plot(model.1)
plot(laenge.stjean$Laenge.cm ~ laenge.stjean$Temperatur, pch=16,
xlab="Temperatur [°C]", ylab="Keimlingslänge [cm]", xlim=c(10, 35),
main="St. Jean")
abline(model.1, lty="dashed")
abline(model.1b, lty="dotted")
coef(model.2)
curve(coef(model.2)["(Intercept)"]
+ coef(model.2)["Temperatur"] * x
+ coef(model.2)["I(Temperatur^2)"] * x * x,
add=T)
legend("topleft", legend=c(expression(y == beta[1]*x),
expression(y == beta[0]+beta[1]*x),
expression(y == beta[0]+beta[1]*x+beta[2]*x^2)),
lwd=2, lty=c("dotted", "dashed", "solid"), inset=0.01, bg="white", bty="n")
library(ggplot2)
ggplot(laenge.stjean, aes(y = Laenge.cm, x = Temperatur) +
geom_point() +
labs(x = "Temperatur [°C]", y ="Keimlingslänge [cm]") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
library(ggplot2)
ggplot(laenge.stjean, aes(y = Laenge.cm, x = Temperatur) +
geom_point() +
labs(x = "Temperatur [°C]", y ="Keimlingslänge [cm]") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
library(ggplot2)
ggplot(laenge.stjean, aes(y = Laenge.cm, x = Temperatur)) +
geom_point() +
labs(x = "Temperatur [°C]", y ="Keimlingslänge [cm]") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
par(mfrow = c(2, 2))
plot(model.2)
shapiro.test(model.2$residuals)
bio <- read.table("management.biomass.txt", header=TRUE)
# ggf: names(bio)
# ggf: str(bio)
laenge <- read.table("Laenge.Temperatur.txt", header=TRUE, stringsAsFactors = T)
write.csv(laenge, "laenge.csv")
names(laenge)
str(laenge)
plot(Laenge.cm ~ Temperatur, data = laenge)
plot(Laenge.cm ~ Ort, data = laenge)
bio <- read.table("management.biomass.txt", header=TRUE, stringsAsFactors = TRUE)
write.csv(bio, "management.biomass.csv"
str(bio)
bio <- read.table("management.biomass.txt", header=TRUE, stringsAsFactors = TRUE)
write.csv(bio, "management.biomass.csv")
str(bio)
View(bio)
names(bio) <- c("management", "samengewicht", "biomasse")
bio.ohneNA <- na.omit(bio)
write.csv(bio, "management.biomass.csv")
library(ggplot2)
ggplot(bio.ohneNA, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm")
plot(bio.ohneNA$samengewicht, bio.ohneNA$biomasse)
plot(bio.ohneNA$samengewicht, bio.ohneNA$biomasse,
col=c("green", "blue")[bio.ohneNA$management],
xlab="Samengewicht [mg]", ylab="Biomasse [g]",
xlim=c(40, 100), ylim=c(0, 2.5))
legend("topright", c("Genutzt", "Kontrolle"), pch=21, lty=1, inset=0.01,
col=c("green", "blue"), title="Managementintensität", bty="n")
library(ggplot2)
ggplot(bio.ohneNA, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]")
mod.1 <- lm(biomasse ~ management * samengewicht, data=bio.ohneNA)
summary(mod.1)
bio <- read.csv("management.biomass.csv", header=TRUE, stringsAsFactors = TRUE)
str(bio)
bio <- read.csv("management.biomass.csv", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
str(bio)
library(ggplot2)
ggplot(bio.ohneNA, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]")
boxplot(biomasse ~ management, data = bio)
boxplot(biomasse ~ management, data = bio)
leveneTest(biomasse ~ management, data = bio)
boxplot(biomasse ~ management, data = bio)
qqPlot(biomasse, group.by = management, data = bio)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, group.by = bio$management)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
qqPlot(bio$biomasse)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
hist(bio$biomasse)
hist(bio$samengewicht)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
mod.2 <- lm(biomasse ~ management : samengewicht, data=bio)
summary(mod.1)
anova(mod.1, mod.2)
mod.2
mod.2 <- lm(biomasse ~ management : samengewicht, data=bio)
summary(mod.2)
anova(mod.1, mod.2)
shapiro.test(mod.2$res)
par(mfrow=c(2, 2))
plot(mod.2)
par(mfrow=c(1, 1))
plot(bio.ohneNA$samengewicht, bio.ohneNA$biomasse,
col=c("green", "blue")[bio.ohneNA$management],
xlab="Samengewicht [mg]", ylab="Biomasse [g]",
xlim=c(40, 100), ylim=c(0, 2.5))
legend("topright", c("Genutzt", "Kontrolle"), pch=21, lty=1, inset=0.01,
col=c("green", "blue"), title="Managementintensität", bty="n")
abline(coef(mod.2)["(Intercept)"], coef(mod.2)["samengewicht"], col="green")
library(ggplot2)
ggplot(laenge.stjean, aes(y = Laenge.cm, x = Temperatur)) +
geom_point() +
labs(x = "Temperatur [°C]", y ="Keimlingslänge [cm]") +
geom_smooth(method = "lm", col = "red") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
model.1 <- lm(Laenge.cm  ~ Temperatur, data=laenge.stjean)
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
laenge <- read.table("Laenge.Temperatur.txt", header=TRUE, stringsAsFactors = T)
write.csv(laenge, "laenge.csv")
names(laenge)
str(laenge)
plot(Laenge.cm ~ Temperatur, data = laenge)
plot(Laenge.cm ~ Ort, data = laenge)
laenge <- read.table("Laenge.Temperatur.txt", header=TRUE, stringsAsFactors = T)
write.csv(laenge, "laenge.csv")
names(laenge)
str(laenge)
plot(Laenge.cm ~ Temperatur, data = laenge)
plot(Laenge.cm ~ Ort, data = laenge)
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
# nicht unbedingt nötig: laenge.stjean <- droplevels(laenge.stjean)
str(laenge.stjean)
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
# nicht unbedingt nötig: laenge.stjean <- droplevels(laenge.stjean)
str(laenge.stjean)
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
# nicht unbedingt nötig: laenge.stjean <- droplevels(laenge.stjean)
str(laenge.stjean)
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
# nicht unbedingt nötig: laenge.stjean <- droplevels(laenge.stjean)
str(laenge.stjean)
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
# nicht unbedingt nötig: laenge.stjean <- droplevels(laenge.stjean)
str(laenge.stjean)
qqnorm(iris$Sepal.Width)
qqline(iris$Sepal.Width)
library(car)
library(car)
qqPlot(iris$Sepal.Width)
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur)
laenge.stjean <- laenge[laenge$Ort == "Stjean", ]
# nicht unbedingt nötig: laenge.stjean <- droplevels(laenge.stjean)
str(laenge.stjean)
plot(Laenge.cm ~ Temperatur, data = laenge.stjean)
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur)
plot(Laenge.cm ~ Temperatur, data = laenge.stjean)
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur, method = "spearman")
plot(Laenge.cm ~ Temperatur, data = laenge.stjean)
plot(rank(Laenge.cm) ~ rank(Temperatur), data = laenge.stjean)
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur, method = "spearman")
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur)
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur, method = "spearman")
hist(laenge.stjean$Laenge.cm)
hist(laenge.stjean$Temperatur)
shapiro.test(laenge.stjean$Laenge.cm)
shapiro.test(laenge.stjean$Temperatur)
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur)
cor(laenge.stjean$Laenge.cm, laenge.stjean$Temperatur, method = "spearman")
model.1 <- lm(Laenge.cm  ~ Temperatur, data=laenge.stjean)
summary(model.1)
par(mfrow = c(2, 2))
plot(model.1)
model.2 <- lm(Laenge.cm  ~ Temperatur + I(Temperatur^2), data=laenge.stjean)
summary(model.2)
anova(model.1, model.2)
par(mfrow = c(2, 2))
plot(model.1)
par(mfrow = c(2, 2))
plot(model.2)
par(mfrow = c(2, 2))
plot(model.2)
par(mfrow = c(2, 2))
plot(model.2)
shapiro.test(model.2$residuals)
library(ggplot2)
ggplot(laenge.stjean, aes(y = Laenge.cm, x = Temperatur)) +
geom_point() +
labs(x = "Temperatur [°C]", y ="Keimlingslänge [cm]") +
geom_smooth(method = "lm", col = "red") +
geom_smooth(method = "lm", formula = y ~ poly(x, 2))
bio <- read.csv("management.biomass.csv", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
str(bio)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
Rank-Sum-Test der beiden --> nicht normalverteilt!
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
#Rank-Sum-Test der beiden --> nicht normalverteilt!
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
View(bio)
na.omit(bio)
bio <- read.csv("management.biomass.csv", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
bio <- na.omit(bio)
str(bio)
write.csv(bio, "management.biomass.csv")
write.csv(bio, "management.biomass.csv")
bio <- read.csv("management.biomass.csv", header = TRUE, stringsAsFactors = TRUE, row.names = 1)
str(bio)
boxplot(biomasse ~ management, data = bio)
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
wilcox.test(biomasse ~ management, bio)
View(bio)
with(bio, mean(biomasse[management == "Kontrolle"]) -
wilcox.test(biomasse ~ management, bio)
with(bio, mean(biomasse[management == "Kontrolle"]) -
mean(biomasse[management == "Genutzt"]))
with(bio, median(biomasse[management == "Kontrolle"]) -
median(biomasse[management == "Genutzt"]))
View(bio)
hist(bio$biomasse[bio$management == "Kontrolle"])
hist(bio$biomasse[bio$management == "Genutzt"])
qqPlot(bio$biomasse, groups = bio$management)
tapply(bio$biomasse, bio$management, shapiro.test)
library(ggplot2)
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]")
library(ggplot2)
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]")
library(ggplot2)
ggplot(bio, aes(x= samengewicht, y = biomasse)) +
geom_point() +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]")
mod.1 <- lm(biomasse ~ management * samengewicht, data=bio)
summary(mod.1)
mod.1 <- lm(biomasse ~ management * samengewicht, data=bio)
summary(mod.1)
summary.aov(mod.1)
mod.2 <- lm(biomasse ~ management : samengewicht, data=bio)
summary(mod.2)
anova(mod.1, mod.2)
mod.1 <- aov(biomasse ~ management * samengewicht, data=bio)
summary(mod.1)
summary.lm(mod.1)
mod.2 <- aov(biomasse ~ management : samengewicht, data=bio)
summary(mod.2)
anova(mod.1, mod.2)
mod.2 <- aov(biomasse ~ management + samengewicht, data=bio)
summary(mod.2)
anova(mod.1, mod.2)
mod.2 <- aov(biomasse ~ management + samengewicht, data=bio)
summary(mod.2)
summary.lm(mod.2)
anova(mod.1, mod.2)
shapiro.test(mod.2$res)
par(mfrow=c(2, 2))
plot(mod.2)
par(mfrow=c(1, 1))
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]")
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]") +
scale_color_discrete(c("1", "2"))
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]") +
scale_color_discrete("Management"))
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]") +
scale_color_discrete("Management")
predict(mod.2)
View(bio)
bio$fit <- predict(mod.2)
bio$fit <- predict(mod.2)
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_lines(aes(y = fit)) +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]") +
scale_color_discrete("Management")
bio$fit <- predict(mod.2)
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_line(aes(y = fit)) +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]") +
scale_color_discrete("Management")
bio$fit <- predict(mod.2)
ggplot(bio, aes(x= samengewicht, y = biomasse)) +
geom_point() +
geom_line(aes(y = fit)) +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]") +
scale_color_discrete("Management")
bio$fit <- predict(mod.2)
ggplot(bio, aes(x= samengewicht, y = biomasse, col = management)) +
geom_point() +
geom_line(aes(y = fit)) +
labs(x = "Samengewicht [mg]", y = "Biomasse [g]") +
scale_color_discrete("Management")
boxplot(biomasse ~ management, data = bio,
ylab = "Biomasse (g)",
xlab = "Management")
shapiro.test(mod.2$res)
par(mfrow=c(2, 2))
plot(mod.2)
par(mfrow=c(1, 1))
library(ggplot2)
ggplot(laenge.stjean, aes(y = Laenge.cm, x = Temperatur)) +
geom_point() +
labs(x = "Temperatur [°C]", y ="Keimlingslänge [cm]")
# Plotten eines Streudiagramms der Variablen
plot(Petal.Width ~ Petal.Length, data = iris)
# ziehen einer Regressionsgerade mithilfe der fit Werte
lines(fit ~ Petal.Length, data = iris, col="red")
# Erstellen eines linearen Models
lm.iris <- lm(Petal.Width ~ Petal.Length, data = iris)
lm.iris
# Speichern der vorausgesagten Werte als neue Spalte
iris$fit <- predict(lm.iris)
# ziehen einer Regressionsgerade mithilfe der fit Werte
lines(fit ~ Petal.Length, data = iris, col="red")
# Erstellen eines einfachen Scatterplots mit Regressionsgerade auf Basis der vorausgesagten Werte des Models
ggplot(iris, aes(Petal.Length, Petal.Width)) +
geom_point() +
geom_line(aes(y = fit))
library(ggplot3)
library(ggplot2)
# Erstellen eines einfachen Scatterplots mit Regressionsgerade auf Basis der vorausgesagten Werte des Models
ggplot(iris, aes(Petal.Length, Petal.Width)) +
geom_point() +
geom_line(aes(y = fit))
# Laden des Datensatzes und Transformation der nitrogen Variable
cornnit <- read.csv2("data/cornnit.csv")
cornnit$lognitrogen <- log(cornnit$nitrogen+1)
source ('https://raw.githubusercontent.com/fvlampe/scripts/main/plot.t.power.r')
plot.t.power(0.5, 20, 20)
plot.t.power(0.5, 30, 30)
swirl()
swirl::swirl()
library(swirl)
install_course_github("fvlampe", "swirl_veg2", multi = TRUE)
swirl()
1+2
x
skip()
skip()
skip()
y
skip()
skip()
skip()
library(swirl)
install_course_github("fvlampe", "swirl_veg2", multi = TRUE)
swirl()
1+2
library(swirl)
install_course_github("fvlampe", "swirl_veg2", multi = TRUE)
swirl()
library(tidyverse)
library(vegan)
## Import tables
elev_full <- read.csv("elev_full.csv",
dec = ".",
sep = ",",
header = T,
row.names = 1)
source('https://raw.githubusercontent.com/fvlampe/goeveg/master/R/specresponse.R')
## Import tables
elev_full <- read.csv("elev_full.csv",
dec = ".",
sep = ",",
header = T,
row.names = 1)
str(elev_full)
library(vegan)
library(adespatial)
matrix3 <- data.frame("Spec A" = c(0, 1, 0),
"Spec B" = c(1, 0, 4),
"Spec C" = c(1, 0, 8))
matrix3 <- data.frame("A" = c(0, 1, 0),
"B" = c(1, 0, 4),
"C" = c(1, 0, 8))
row.names(matrix3) <- c("1", "2", "3")
pcoa.list <- list(0)
pcoa.list[[1]] <- cmdscale(dist(matrix3), k = (nrow(matrix3) - 1), eig = TRUE) # Euclidean distance
pcoa.list[[2]] <- cmdscale(dist(decostand(matrix3, "normalize")), k = (nrow(matrix3) - 1), eig = TRUE) # Chord distance
pcoa.list[[3]] <- cmdscale(vegdist(matrix3, method = "chisq"), k = (nrow(matrix3) - 1), eig = TRUE) # Chi-squared distance
pcoa.list[[2]] <- cmdscale(dist(decostand(matrix3, "pa")), k = (nrow(matrix3) - 1), eig = TRUE) # Presence-absence
names.list <- c("PCoA (Euclidean distance)", "PCoA (Chord distance)",
"PCoA (Chi-squared distance)", "PCoA (Presence-absence)")
png("pcoa_distances_1.png", width = 2500, height = 2500, res = 300)
par(mfrow = c(2,2))
for(i in 1:4) {
# Plot with site scores
ordiplot(scores(pcoa.list[[i]]), type = "t", main = names.list[i], cex = 1.3)
abline(h = 0, lty = 3)
abline(v = 0, lty = 3)
# e.g. distance between site 2 and 3 is "9", between 1 and 2 is "1.7"
# Add species scores as WA of site scores
pcoa.wa <- wascores(pcoa.list[[i]]$points[, 1:2], matrix3)
text(pcoa.wa, rownames(pcoa.wa), cex = 1.3, col = "red")
}
dev.off()
par(mfrow = c(2,2))
for(i in 1:4) {
# Plot with site scores
ordiplot(scores(pcoa.list[[i]]), type = "t", main = names.list[i], cex = 1.3)
abline(h = 0, lty = 3)
abline(v = 0, lty = 3)
# e.g. distance between site 2 and 3 is "9", between 1 and 2 is "1.7"
# Add species scores as WA of site scores
pcoa.wa <- wascores(pcoa.list[[i]]$points[, 1:2], matrix3)
text(pcoa.wa, rownames(pcoa.wa), cex = 1.3, col = "red")
}
dist(decostand(matrix3, "pa"))
pcoa.list <- list(0)
pcoa.list[[1]] <- cmdscale(dist(matrix3), k = (nrow(matrix3) - 1), eig = TRUE) # Euclidean distance
pcoa.list[[2]] <- cmdscale(dist(decostand(matrix3, "normalize")), k = (nrow(matrix3) - 1), eig = TRUE) # Chord distance
pcoa.list[[3]] <- cmdscale(vegdist(matrix3, method = "chisq"), k = (nrow(matrix3) - 1), eig = TRUE) # Chi-squared distance
pcoa.list[[4]] <- cmdscale(dist(decostand(matrix3, "pa")), k = (nrow(matrix3) - 1), eig = TRUE) # Presence-absence
names.list <- c("PCoA (Euclidean distance)", "PCoA (Chord distance)",
"PCoA (Chi-squared distance)", "PCoA (Presence-absence)")
par(mfrow = c(2,2))
for(i in 1:4) {
# Plot with site scores
ordiplot(scores(pcoa.list[[i]]), type = "t", main = names.list[i], cex = 1.3)
abline(h = 0, lty = 3)
abline(v = 0, lty = 3)
# e.g. distance between site 2 and 3 is "9", between 1 and 2 is "1.7"
# Add species scores as WA of site scores
pcoa.wa <- wascores(pcoa.list[[i]]$points[, 1:2], matrix3)
text(pcoa.wa, rownames(pcoa.wa), cex = 1.3, col = "red")
}
png("pcoa_distances_1.png", width = 2500, height = 2500, res = 300)
par(mfrow = c(2,2))
for(i in 1:4) {
# Plot with site scores
ordiplot(scores(pcoa.list[[i]]), type = "t", main = names.list[i], cex = 1.3)
abline(h = 0, lty = 3)
abline(v = 0, lty = 3)
# e.g. distance between site 2 and 3 is "9", between 1 and 2 is "1.7"
# Add species scores as WA of site scores
pcoa.wa <- wascores(pcoa.list[[i]]$points[, 1:2], matrix3)
text(pcoa.wa, rownames(pcoa.wa), cex = 1.3, col = "red")
}
dev.off()
remotes::install_github("r-link/corrmorant")
library(corrmorant)
setwd("C:/Users/Friedemann Goral/ownCloud/Lehre/R Kurs 2023/Swirl/Statistik_mit_R_in_der_Oekologie/Arbeiten_mit_Tabellen")
library(readr)
agroforest_var <- read_csv("agroforest_var.csv")
View(agroforest_var)
str(ad)
library(readr)
af <- read_csv("agroforest_var.csv")
View(af)
str(af)
